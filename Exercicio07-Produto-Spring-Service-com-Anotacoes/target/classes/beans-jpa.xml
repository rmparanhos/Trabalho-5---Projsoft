<?xml version="1.0" encoding="ISO-8859-1"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
       xmlns:context="http://www.springframework.org/schema/context" 
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
             http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
             http://www.springframework.org/schema/context 
             http://www.springframework.org/schema/context/spring-context-3.0.xsd 
             http://www.springframework.org/schema/tx
             http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">      

<!--  
    Para o container IoC do Spring gerenciar seus componentes é preciso que você os declare
     um a um neste arquivo, conforme vem abaixo:
    
    	<bean id="produtoAppService" class="servico.ProdutoAppService">
        	<property name="produtoDAO" ref="produtoDAOImpl" />
		</bean>

		<bean id="produtoDAOImpl" class="dao.impl.ProdutoDAOImpl" />
    
    No  entanto,  é  possível  solicitar  ao  Spring  que ele  detecte automaticamente seus 
    componentes sem a necessidade de uma configuração manual. 
    
    Por default, o  Spring é capaz de  detectar todos  os componentes  com uma  anotação de 
    esteriótipo. O tipo básico de anotação que denota um componente gerenciado pelo  Spring
    é  @Component.  Neste  exercício  é  possível  anotar  a  classe  ProdutoAppService   e 
    ProdutoDAOImpl  com  @Component  e  anotar  o  campo  do  tipo  ProdutoDAO  da   classe 
    ProdutoAppService com @Autowired.
    
    Após aplicar as anotações do tipo esteriótipo, podemos pedir ao Spring para escanear os
    componentes, declarando neste arquivo, o elemento xml abaixo. Neste elemento é  preciso
    especificar o(s) package(s) que serão  escaneados (sub-packages tb são  escaneados).  É 
    possível utilizar vírgulas para separar os packages.
    
         <context:component-scan base-package="dao.impl" />
    
    O elemento xml acima deve refereciar o package da classe que será  injetada  em  outra.
    Isto é,  neste  caso, deve  referenciar o  package da  classe DAO que  será injetada no 
    serviço. A anotação @AutoWired foi especificada na classe de serviço. 
    
    Alternativamente  podemos  utilizar  anotações  mais  específicas  para  cada  tipo  de 
    componente:
    
    @Component - é o esteriótipo básico e denota componentes de propósito geral.
    @Repository - denota um componente do tipo DAO
    @Service - denota um componente da camada de serviço
    
    Logo, em vez de declarar os componentes de serviço e de DAO com a anotação  @Component,
    podemos  utilizar  a  anotação  @Service  na  classe  ProdutoAppService  e  a  anotação 
    @Repository na classe ProdutoDAOImpl. Na classe de serviço teremos que anotar  o  campo 
    do tipo ProdutoDAO com @Autowired.    

	<bean id="produtoDAO" class="dao.impl.ProdutoDAOImpl" />
-->
	<bean id="produtoAppService" class="servico.ProdutoAppService" />

    <bean id="alunoAppService" class="servico.AlunoAppService" />

    <context:component-scan base-package="dao.impl" />

<!-- Também  é  preciso  registrar  uma instância de PersistenceAnnotationBeanPostProcessor  
     para  que  ela  injete  um  entity  manager  diferente  nas propriedades  anotadas com 
     @PersistenceContext, das classes do  tipo  DAO.  A  cada  nova  transação,  um  entity 
     manager diferente é injetado.
     
     Para  registrar  esta  instância  encarregada  de  injetar  os  entity  managers basta 
     acrescentar o elemento xml abaixo neste arquivo de configuração.
-->

	<context:annotation-config/>

<!--  Aqui  é  preciso  habilitar o  gerenciamento de  transação  de  forma  declarativa  e 
      informar   o   nome   da   classe    responsável   pelo   controle   de    transação: 
      JpaTransactionManager.
 -->
    <tx:annotation-driven />
    
    <bean id="transactionManager"
          class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

<!-- Spring provê  um fábrica  denominada LocalEntityManagerFactoryBean,  para que se possa 
     criar um objeto entity manager factory no container IoC. É preciso especificar o  nome
     da unidade de persistência definida no arquivo de configuração da JPA.  -->

    <bean id="entityManagerFactory"
          class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="exercicio" />
    </bean>

</beans>
